{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [],
   "source": [
    "df = pd.read_csv(\"train.csv\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>label</th>\n",
       "      <th>pixel0</th>\n",
       "      <th>pixel1</th>\n",
       "      <th>pixel2</th>\n",
       "      <th>pixel3</th>\n",
       "      <th>pixel4</th>\n",
       "      <th>pixel5</th>\n",
       "      <th>pixel6</th>\n",
       "      <th>pixel7</th>\n",
       "      <th>pixel8</th>\n",
       "      <th>...</th>\n",
       "      <th>pixel774</th>\n",
       "      <th>pixel775</th>\n",
       "      <th>pixel776</th>\n",
       "      <th>pixel777</th>\n",
       "      <th>pixel778</th>\n",
       "      <th>pixel779</th>\n",
       "      <th>pixel780</th>\n",
       "      <th>pixel781</th>\n",
       "      <th>pixel782</th>\n",
       "      <th>pixel783</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>7</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>10 rows Ã— 785 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "   label  pixel0  pixel1  pixel2  pixel3  pixel4  pixel5  pixel6  pixel7  \\\n",
       "0      1       0       0       0       0       0       0       0       0   \n",
       "1      0       0       0       0       0       0       0       0       0   \n",
       "2      1       0       0       0       0       0       0       0       0   \n",
       "3      4       0       0       0       0       0       0       0       0   \n",
       "4      0       0       0       0       0       0       0       0       0   \n",
       "5      0       0       0       0       0       0       0       0       0   \n",
       "6      7       0       0       0       0       0       0       0       0   \n",
       "7      3       0       0       0       0       0       0       0       0   \n",
       "8      5       0       0       0       0       0       0       0       0   \n",
       "9      3       0       0       0       0       0       0       0       0   \n",
       "\n",
       "   pixel8  ...  pixel774  pixel775  pixel776  pixel777  pixel778  pixel779  \\\n",
       "0       0  ...         0         0         0         0         0         0   \n",
       "1       0  ...         0         0         0         0         0         0   \n",
       "2       0  ...         0         0         0         0         0         0   \n",
       "3       0  ...         0         0         0         0         0         0   \n",
       "4       0  ...         0         0         0         0         0         0   \n",
       "5       0  ...         0         0         0         0         0         0   \n",
       "6       0  ...         0         0         0         0         0         0   \n",
       "7       0  ...         0         0         0         0         0         0   \n",
       "8       0  ...         0         0         0         0         0         0   \n",
       "9       0  ...         0         0         0         0         0         0   \n",
       "\n",
       "   pixel780  pixel781  pixel782  pixel783  \n",
       "0         0         0         0         0  \n",
       "1         0         0         0         0  \n",
       "2         0         0         0         0  \n",
       "3         0         0         0         0  \n",
       "4         0         0         0         0  \n",
       "5         0         0         0         0  \n",
       "6         0         0         0         0  \n",
       "7         0         0         0         0  \n",
       "8         0         0         0         0  \n",
       "9         0         0         0         0  \n",
       "\n",
       "[10 rows x 785 columns]"
      ]
     },
     "execution_count": 32,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.head(10)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [],
   "source": [
    "df = df.values"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(42000, 785)"
      ]
     },
     "execution_count": 35,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "784"
      ]
     },
     "execution_count": 36,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "28*28"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([1, 0, 1, 4])"
      ]
     },
     "execution_count": 42,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df[:4 , 0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [],
   "source": [
    "X = df[:,1:]\n",
    "Y = df[:,0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(array([[0, 0, 0, ..., 0, 0, 0],\n",
       "        [0, 0, 0, ..., 0, 0, 0],\n",
       "        [0, 0, 0, ..., 0, 0, 0],\n",
       "        ...,\n",
       "        [0, 0, 0, ..., 0, 0, 0],\n",
       "        [0, 0, 0, ..., 0, 0, 0],\n",
       "        [0, 0, 0, ..., 0, 0, 0]]),\n",
       " array([1, 0, 1, ..., 7, 6, 9]))"
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X , Y"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAPsAAAD4CAYAAAAq5pAIAAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAALEgAACxIB0t1+/AAAADh0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uMy4xLjMsIGh0dHA6Ly9tYXRwbG90bGliLm9yZy+AADFEAAALmElEQVR4nO3dQcwU9R3G8eep1Yt6gBroW6TVGg5tmhQbQppoKm+MhnJBDzZyaGhi+nrQRhMPJfbwws00VdOTyWskYmM1JmrlYFoJAWkvhldDESQKNVSRN+9bw0E8WfTXww7NK+zuLDszO8v7+36Sze7OzM78mLwP/9n9z8zfESEAS9832i4AwGgQdiAJwg4kQdiBJAg7kMQ3R7kx2/z0DzQsItxteqWW3fZG2+/bPmF7W5V1AWiWh+1nt32FpA8k3SHplKSDkrZExHt9PkPLDjSsiZZ9vaQTEfFhRHwh6UVJmyusD0CDqoR9laSPF70/VUz7GttTtmdtz1bYFoCKqvxA1+1Q4aLD9IiYkTQjcRgPtKlKy35K0upF76+XdLpaOQCaUiXsByWtsX2j7ask3Stpdz1lAajb0IfxEXHO9oOS/ibpCkk7I+JobZUBqNXQXW9DbYzv7EDjGjmpBsDlg7ADSRB2IAnCDiRB2IEkCDuQBGEHkiDsQBKEHUiCsANJEHYgCcIOJEHYgSQIO5AEYQeSIOxAEoQdSIKwA0kQdiAJwg4kQdiBJAg7kARhB5Ig7EAShB1IgrADSRB2IAnCDiRB2IEkCDuQxNDjs0uS7ZOSzkr6UtK5iFhXR1EA6lcp7IXJiPi0hvUAaBCH8UASVcMekt6w/bbtqW4L2J6yPWt7tuK2AFTgiBj+w/Z3IuK07RWS9kj6TUQc6LP88BsDMJCIcLfplVr2iDhdPC9IelXS+irrA9CcocNu+2rb155/LelOSUfqKgxAvar8Gr9S0qu2z6/nzxHx11qqwtdU+aq1f//+vvMnJyeHXjcuL0OHPSI+lPTjGmsB0CC63oAkCDuQBGEHkiDsQBKEHUiijgthUNGGDRvaLmEsbd++ve/86enpvvP7dSuWdUkuRbTsQBKEHUiCsANJEHYgCcIOJEHYgSQIO5AE/ewjULW/uEy/PuPMl7Du27ev57zi0uxUaNmBJAg7kARhB5Ig7EAShB1IgrADSRB2IAn62UegyX50KXdfOgZHyw4kQdiBJAg7kARhB5Ig7EAShB1IgrADSbjKcMCXvDF7dBsboX7XTUvV7wtf1o++VO+B3uTf5lK+nj0iuv7jSlt22zttL9g+smjactt7bB8vnpfVWSyA+g1yGP+spI0XTNsmaW9ErJG0t3gPYIyVhj0iDkg6c8HkzZJ2Fa93Sbqr5roA1GzYc+NXRsScJEXEnO0VvRa0PSVpasjtAKhJ4xfCRMSMpBlp6f5AB1wOhu16m7c9IUnF80J9JQFowrBh3y1pa/F6q6TX6ikHQFNK+9ltvyBpg6TrJM1Lmpb0F0kvSfqupI8k3RMRF/6I121dS/IwvulzFZZyn3A/Vffrjh07es4ru5f/5axXP3vpd/aI2NJj1u2VKgIwUpwuCyRB2IEkCDuQBGEHkiDsQBLcShqtWcrdX+OIlh1IgrADSRB2IAnCDiRB2IEkCDuQBGEHkqCf/TJQdivqpXoradSLlh1IgrADSRB2IAnCDiRB2IEkCDuQBGEHkqCf/TJQNiR0v372N998s9K2y/rwy+b3u2Z9enr60gvC0GjZgSQIO5AEYQeSIOxAEoQdSIKwA0kQdiCJ0iGba93YEh2yuUxZP3nZ9eoYzuTkZM95S/keAL2GbC5t2W3vtL1g+8iiadttf2L7UPHYVGexAOo3yGH8s5I2dpn+ZESsLR6v11sWgLqVhj0iDkg6M4JaADSoyg90D9o+XBzmL+u1kO0p27O2ZytsC0BFw4b9KUk3SVoraU7S470WjIiZiFgXEeuG3BaAGgwV9oiYj4gvI+IrSU9LWl9vWQDqNlTYbU8senu3pCO9lgUwHkr72W2/IGmDpOskzUuaLt6vlRSSTkq6PyLmSjeWtJ+9TNk45Vz33V1ZX3m/fvalrFc/e+nNKyJiS5fJz1SuCMBIcboskARhB5Ig7EAShB1IgrADSXCJKyopuzy37PLeKuyuPUzpDX2JK4ClgbADSRB2IAnCDiRB2IEkCDuQBGEHkqCfHY1q8u+Lfvbu6GcHkiPsQBKEHUiCsANJEHYgCcIOJEHYgSRK7y4L9FN2G+wqduzY0di6M6JlB5Ig7EAShB1IgrADSRB2IAnCDiRB2IEk6GdHJQwnffkobdltr7a9z/Yx20dtP1RMX257j+3jxfOy5ssFMKxBDuPPSXokIn4g6aeSHrD9Q0nbJO2NiDWS9hbvAYyp0rBHxFxEvFO8PivpmKRVkjZL2lUstkvSXU0VCaC6S/rObvsGSTdLekvSyoiYkzr/Idhe0eMzU5KmqpUJoKqBw277GkkvS3o4Ij4b9GZ/ETEjaaZYBzecBFoyUNeb7SvVCfrzEfFKMXne9kQxf0LSQjMlAqhDacvuThP+jKRjEfHEolm7JW2V9Fjx/FojFaJVTV7COs7bXooGOYy/RdIvJb1r+1Ax7VF1Qv6S7fskfSTpnmZKBFCH0rBHxD8k9fqCfnu95QBoCqfLAkkQdiAJwg4kQdiBJAg7kASXuKI13Cp6tGjZgSQIO5AEYQeSIOxAEoQdSIKwA0kQdiAJwg4kQdiBJAg7kARhB5Ig7EAShB1IgrADSRB2IAmuZ0dft912W2Pr3r9/f2PrxsVo2YEkCDuQBGEHkiDsQBKEHUiCsANJEHYgCUdE/wXs1ZKek/RtSV9JmomIP9reLunXkv5TLPpoRLxesq7+G8PYKfv7KDM5OdlzHv3szYiIrqMuD3JSzTlJj0TEO7avlfS27T3FvCcj4g91FQmgOYOMzz4naa54fdb2MUmrmi4MQL0u6Tu77Rsk3SzprWLSg7YP295pe1mPz0zZnrU9W6lSAJUMHHbb10h6WdLDEfGZpKck3SRprTot/+PdPhcRMxGxLiLW1VAvgCENFHbbV6oT9Ocj4hVJioj5iPgyIr6S9LSk9c2VCaCq0rDbtqRnJB2LiCcWTZ9YtNjdko7UXx6AugzS9XarpL9LeledrjdJelTSFnUO4UPSSUn3Fz/m9VsXXW9Aw3p1vZWGvU6EHWher7BzBh2QBGEHkiDsQBKEHUiCsANJEHYgCcIOJEHYgSQIO5AEYQeSIOxAEoQdSIKwA0kQdiCJUQ/Z/Kmkfy96f10xbRyNa23jWpdEbcOqs7bv9Zox0uvZL9q4PTuu96Yb19rGtS6J2oY1qto4jAeSIOxAEm2Hfabl7fczrrWNa10StQ1rJLW1+p0dwOi03bIDGBHCDiTRSthtb7T9vu0Ttre1UUMvtk/aftf2obbHpyvG0FuwfWTRtOW299g+Xjx3HWOvpdq22/6k2HeHbG9qqbbVtvfZPmb7qO2Hiumt7rs+dY1kv438O7vtKyR9IOkOSackHZS0JSLeG2khPdg+KWldRLR+Aobtn0n6XNJzEfGjYtrvJZ2JiMeK/yiXRcRvx6S27ZI+b3sY72K0oonFw4xLukvSr9TivutT1y80gv3WRsu+XtKJiPgwIr6Q9KKkzS3UMfYi4oCkMxdM3ixpV/F6lzp/LCPXo7axEBFzEfFO8fqspPPDjLe67/rUNRJthH2VpI8XvT+l8RrvPSS9Yftt21NtF9PFyvPDbBXPK1qu50Klw3iP0gXDjI/Nvhtm+POq2gh7t6Fpxqn/75aI+Imkn0t6oDhcxWAGGsZ7VLoMMz4Whh3+vKo2wn5K0upF76+XdLqFOrqKiNPF84KkVzV+Q1HPnx9Bt3heaLme/xunYby7DTOuMdh3bQ5/3kbYD0paY/tG21dJulfS7hbquIjtq4sfTmT7akl3avyGot4taWvxequk11qs5WvGZRjvXsOMq+V91/rw5xEx8oekTer8Iv8vSb9ro4YedX1f0j+Lx9G2a5P0gjqHdf9V54joPknfkrRX0vHiefkY1fYndYb2PqxOsCZaqu1Wdb4aHpZ0qHhsanvf9alrJPuN02WBJDiDDkiCsANJEHYgCcIOJEHYgSQIO5AEYQeS+B/ceNEGJrcmsQAAAABJRU5ErkJggg==\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "4\n"
     ]
    }
   ],
   "source": [
    "def draw(sample):\n",
    "    img = sample.reshape([28,28])\n",
    "    plt.imshow(img ,  cmap = \"gray\")\n",
    "    plt.show()\n",
    "\n",
    "    \n",
    "draw(X[78])\n",
    "print(Y[78])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#dataset  ---> train, validation\n",
    "#train , validation , test  \n",
    "#train.x --> model train(m , c) ---> train.y\n",
    "#valdiation. x--> model --->predicted .y\n",
    "#valiudatoion.y , predicted .y = accuracy\n",
    "\n",
    "\n",
    "##test.x -->model --> precdict.y"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "metadata": {},
   "outputs": [],
   "source": [
    "split = int(X.shape[0]*0.9)\n",
    "\n",
    "X_train = X[:split , :]\n",
    "Y_train = Y[:split ]\n",
    "\n",
    "X_test = X[split: , :]\n",
    "Y_test = Y[split:]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "37800"
      ]
     },
     "execution_count": 62,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "split"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(37800, 784) (37800,)\n",
      "(4200, 784) (4200,)\n"
     ]
    }
   ],
   "source": [
    "print(X_train.shape , Y_train.shape)\n",
    "print(X_test.shape , Y_test.shape)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "\n",
    "# Algorithm"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 64,
   "metadata": {},
   "outputs": [],
   "source": [
    "#KNN"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 65,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n",
       "         0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n",
       "         0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n",
       "         0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n",
       "         0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n",
       "         0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n",
       "         0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n",
       "         0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n",
       "         0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n",
       "         0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  39, 130, 191,\n",
       "       234, 255, 255, 148,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n",
       "         0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   3, 104, 225,\n",
       "       253, 253, 253, 253, 253, 153,   1,   0,   0,   0,   0,   0,   0,\n",
       "         0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   4,  71,\n",
       "       253, 253, 253, 238, 241, 253, 253, 253,  96,   1,   0,   0,   0,\n",
       "         0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n",
       "        62, 253, 253, 247, 131,  20,  36, 105, 224, 253, 253,  12,   0,\n",
       "         0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n",
       "         0, 103, 222, 253, 230, 102,   0,   0,   0,   0,  39, 224, 253,\n",
       "        88,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n",
       "         0,   5,  56, 222, 246, 189,  25,   0,   0,   0,   0,   0,   0,\n",
       "       106, 253, 135,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n",
       "         0,   0,   0, 114, 253, 246, 109,   0,   0,   0,   0,   0,   0,\n",
       "         0,   0,  36, 242, 135,   0,   0,   0,   0,   0,   0,   0,   0,\n",
       "         0,   0,   0,   0, 103, 222, 246, 109,   0,   0,   0,   0,   0,\n",
       "         0,   0,   0,   0,   0, 150, 216,   4,   0,   0,   0,   0,   0,\n",
       "         0,   0,   0,   0,   3,  66, 223, 231,  63,   0,   0,   0,   0,\n",
       "         0,   0,   0,   0,   0,   0,  24, 204, 227,   4,   0,   0,   0,\n",
       "         0,   0,   0,   0,   0,   0,  74, 253, 247, 108,   0,   0,   0,\n",
       "         0,   0,   0,   0,   0,   0,   0,   0, 197, 253,  45,   0,   0,\n",
       "         0,   0,   0,   0,   0,   0,   0,   0, 107, 253, 134,   0,   0,\n",
       "         0,   0,   0,   0,   0,   0,   0,   0,   0, 170, 248, 223,   9,\n",
       "         0,   0,   0,   0,   0,   0,   0,   0,   0,   5, 228, 244,  54,\n",
       "         0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 110, 247, 253,\n",
       "       141,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 107, 253,\n",
       "       199,  20,   0,   0,   0,   0,   0,   0,   0,   0,   0, 111, 246,\n",
       "       253, 220,  36,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n",
       "        88, 247,  57,   0,   0,   0,   0,   0,   0,   0,   0,   0, 171,\n",
       "       246, 253, 253,  45,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n",
       "         0,   0, 113, 243,  16,   0,   0,   0,   0,   0,   0,   0,  59,\n",
       "       217, 246, 253, 128,  37,   4,   0,   0,   0,   0,   0,   0,   0,\n",
       "         0,   0,   0,   0, 130, 252,  98,   0,   0,   0,   0,  20, 100,\n",
       "       129, 231, 253, 253, 219,  22,   0,   0,   0,   0,   0,   0,   0,\n",
       "         0,   0,   0,   0,   0,   0, 130, 247,  57,  63, 166, 106, 188,\n",
       "       234, 253, 253, 253, 222,  48,  16,   0,   0,   0,   0,   0,   0,\n",
       "         0,   0,   0,   0,   0,   0,   0,   0,  70, 253, 243, 246, 253,\n",
       "       253, 253, 253, 253, 226, 141,  40,   0,   0,   0,   0,   0,   0,\n",
       "         0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  73, 253, 253,\n",
       "       253, 253, 253, 253, 253, 142,   9,   0,   0,   0,   0,   0,   0,\n",
       "         0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   1,\n",
       "        79, 253, 253, 238, 129,  48,   5,   2,   0,   0,   0,   0,   0,\n",
       "         0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n",
       "         0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n",
       "         0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n",
       "         0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n",
       "         0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n",
       "         0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n",
       "         0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n",
       "         0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n",
       "         0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n",
       "         0,   0,   0,   0])"
      ]
     },
     "execution_count": 65,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X_test[0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 66,
   "metadata": {},
   "outputs": [],
   "source": [
    "def distance(x1 , x2):\n",
    "    return np.sqrt(sum((x1-x2)**2))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 70,
   "metadata": {},
   "outputs": [],
   "source": [
    "def knn(X , Y , query ,  k = 5):\n",
    "    vals = []\n",
    "    m = X.shape[0]\n",
    "    for i in range(m):\n",
    "        dist = distance(X[i] , query)\n",
    "        vals.append([dist , Y[i]])\n",
    "\n",
    "    vals = sorted(vals)\n",
    "\n",
    "    vals = vals[:k]\n",
    "    vals = np.array(vals)\n",
    "\n",
    "    #print(vals[:,1])\n",
    "    new_val = np.unique(vals [:,1] , return_counts = True)\n",
    "\n",
    "    #print(new_val)\n",
    "\n",
    "    index = new_val[1].argmax()\n",
    "\n",
    "    #print(index)\n",
    "\n",
    "    ans = new_val[0][index]\n",
    "\n",
    "    #print(new_val[0][index])\n",
    "    \n",
    "    return ans"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 78,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1.0 1\n"
     ]
    }
   ],
   "source": [
    "pred = knn(X_train , Y_train ,X_test[10] , k=20)\n",
    "print(pred , Y_test[10])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 79,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "draw(X_test[10])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 85,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1.0\n"
     ]
    }
   ],
   "source": [
    "m= 10#Y_test.shape[0]\n",
    "count = 0\n",
    "for i in range(m):\n",
    "    if knn(X_train,Y_train , X_test[i] , k = 7 )==Y_test[i]:\n",
    "        count+=1\n",
    "        \n",
    "print(count/m)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 86,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "10"
      ]
     },
     "execution_count": 86,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "count"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
